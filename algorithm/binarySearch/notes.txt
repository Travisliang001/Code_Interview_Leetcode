1. if the array is sorted
2. word_prefix matches. 
3. n^2 enhancement.

Template 0:

    l = -1, r = n
    while l + 1 != r:
        m = l + (r-l)/2;
        if(isBlue(m))
            l = m;
        else
            r = m;

    return l or r;

    1 2 3 5 5 5 8 9
                      isBlue                  return l/r
    1. first >= 5:     <5                         r
    2. last < 5:       <5                         l
    3. first > 5        <=5                       r
    4. last <= 5        <=5                       l


Templates:
    Template 1:
            int left=0, right=array.length-1
            while(left<=right){
                int mid = left + (right - left)/2;
                if(nums[mid] == target) return res;
                if(CONDITION_RESULT_LAY_IN_RIGHT_SIDE) left = mid + 1;
                else right = mid - 1; 
            } 
            return -1;
    Template 1 analysis: 
            a. left and right are the windows[] that we want to check to find the target
            b. mid = left + (right - left)/2; to prevent overflow
            c. determine the condition when to move the left and right pointer.
            d. most likely return 'left' val since 'right' val will changing and can't use for a return val.
            e. We only need "mid" to determine whether we should go left or right.(do not need to consider m+1)


    [1 3 5 9 15 20] target = 15,
    analysis: 
        1. start = 0, end=5
            mid = 2, start = 3
        2. start=3, end=5
            mid = 4, end = 4

Initial Condition: left = 0, right = length-1
Termination: left > right
Searching Left: right = mid-1
Searching Right: left = mid+1

    Template 3: 
    [1 3 5 9 15 20] target = 15,
            int start = 0; end = len - 1;
            while(start + 1< end){
                mid = start + (end - start)/2;
                if(nums[mid]<target){
                    start = mid;
                }else{
                    end = mid;
                }
            }
            //(start, end)
    analysis: 
        1. start = 0, end=5
           mid = 0+2 = 2, start = 2;
        2. start=2, end=5
            mid = 3, start = 3
        3. start=3 end = 5
            mid = 4, end = 4

     analysis:

    - Search Condition needs to access element's immediate left and right neighbors
    - Use element's neighbors to determine if condition is met and decide whether to go left or right
    - Gurantees Search Space is at least 3 in size at each step
    - Post-processing required. Loop/Recursion ends when you have 2 elements left. Need to assess if the remaining elements meet the condition.
        
    Initial Condition: left = 0, right = length-1
    Termination: left + 1 == right
    Searching Left: right = mid
    Searching Right: left = mid

    Template 2: 

    int start =0, end = len;
    while(start<end){
        mid = start + (end - start) / 2;
        if(nums[mid] < target){
            start = mid + 1;
        } else{
            end = mid; 
        }
    }

    //post-processing:
    //end condition: left == right
    if(left != numslength && nums[left] == target)
        return left;

    return -1;

    analysis:
        1. Search Condition needs to access the element's immediate right neighbor
        2. Use the element's right neighbor to determine if the condition is met and decide whether to go left or right


    